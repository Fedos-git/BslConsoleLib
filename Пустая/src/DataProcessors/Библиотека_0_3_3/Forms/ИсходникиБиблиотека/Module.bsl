#Область ОписаниеПеременных

&НаКлиенте
Перем РедакторМонако;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;
	
	ИмяСохраненногоФайла = ПолучитьИмяПоследнегоФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыРедактора = Новый Структура("ИмяРеквизита, ИмяЭлемента", "HTML", "ПолеHTML");
	
	//@skip-check use-non-recommended-method
	РедакторМонако = ПолучитьФорму(ПолучитьПолноеИмяФормы("Монако"), ПараметрыРедактора, ЭтотОбъект);
	РедакторМонако.ПриОткрытии(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтандартнымЗавершениемРаботы(Отказ)
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		СохранитьИмяПоследнегоФайла(ИмяСохраненногоФайла);
	КонецЕсли;
	
	Если Модифицированность И ЕстьКод() Тогда
		
		Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросОбновленияСохраненияЗавершение", ЭтотОбъект);
			ТекстВопроса = "Сохранить изменения перед завершением работы?";
		Иначе
			Оповещение = Новый ОписаниеОповещения("ВопросСохраненияЗавершение", ЭтотОбъект);
			ТекстВопроса = "Сохранить текущий код в файл перед завершением работы?";
		КонецЕсли;
		
		Отказ = Истина;
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
			Отказ = Истина;
			ЗакрытьКонсоль(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		
		Если ЗавершениеРаботы = Неопределено ИЛИ НЕ ЗавершениеРаботы Тогда
			
			ПередСтандартнымЗавершениемРаботы(Отказ);
			
		Иначе
			
			Если Модифицированность И ЕстьКод() Тогда
				Отказ = Истина;
				СтандартнаяОбработка = Ложь;
				ТекстПредупреждения = "При закрытии весь несохраненный код будет потерян. Всё равно завершить работу?";
			Иначе
				ЗакрытьКонсоль(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	РедакторМонако.ConsoleOnReady();
	Если РедакторМонако.ИсходникиЗагружены Тогда

		ДокументЗагружен = Истина;
		
		ИнициализацияРедактора();
		АктивироватьДополнительныеФункции();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторМонако.ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	Элементы.КонструкторЗапроса.Доступность = Истина;
	Элементы.ЗагрузитьИзФайла.Доступность = Истина;
	Элементы.СохранитьВФайл.Доступность = Истина;
	Элементы.СохранитьКак.Доступность = Истина;
	Элементы.ЗаменитьВхождения.Доступность = Истина;
	Элементы.ТолькоПросмотр.Доступность = Истина;
	Элементы.БыстрыеПодсказки.Доступность = Истина;
	Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КартаКода.Доступность = Истина;
	Элементы.СтрокаСостояния.Доступность = Истина;
	Элементы.Примеры.Доступность = Истина;
	Элементы.КонструкторЗапроса.Доступность = Истина;
	Элементы.Тема.Доступность = Истина;
	Элементы.ВыполнитьНаКлиенте.Доступность = Истина;
	Элементы.ВыполнитьНаСервере.Доступность = Истина;
	Элементы.ЗагрузитьОбщиеМодули.Доступность = Истина;
	Элементы.СравнитьСОригиналом.Доступность = Истина;
	
	УправлениеБыстрымиПодсказками();
	УправлениеВидимостьюКартыКода();
	УправлениеВидимостьюСтрокиСостояния();
	УправлениеВидимостьюПробеловТабуляций();
	
	ПриПереключенииРежимаЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	ВосстановитьСохраненныеДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)
	
	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");	
	
	Если 0 < ОткрывающаяСкобка Тогда
		
		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);
		
		Если 0 < ЗакрывающаяСкобка Тогда
			
			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");
			
			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	РедакторМонако.ЗагрузитьПодсказкиCodeLens("[]");
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = РедакторМонако.НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			РедакторМонако.ОтметитьОшибку(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	Иначе
		
		АдресХраненияПеременных = Результат.АдресХраненияПеременных;
		
		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда
			
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				
				РедакторМонако.ПоказатьЗначенияПеременных(Результат.ОписаниеПеременных);
				
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				
				РедакторМонако.УстановитьПользовательскиеПодсказки(Результат.ОписаниеПеременных);
			
				Если Результат.ОписаниеПеременных <> "{}" Тогда
					РедакторМонако.ЗагрузитьПодсказкиCodeLens("[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()
	
	СтруктуруРезультата = Новый Структура();
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");
	
	Возврат СтруктуруРезультата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура();
	
	Попытка
		//@skip-check unsupported-operator
		//@skip-check server-execution-safe-mode
		Выполнить(Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКодНаСервере(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	Возврат ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных()
	
	Код = ""; 
	
	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда
	
		Переменные = РедакторМонако.ПолучитьИменаПеременных();
		
		Если 0 < Переменные.length Тогда
			
			ПС = Символы.ПС;
			
			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + ПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя + """)); Исключение КонецПопытки;" + ПС;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь)
	
	Код =  РедакторМонако.ПолучитьТекст();
	
	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");
	
	Код = Код + Переменные;
	
	Возврат Код;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УправлениеТемами(Команда)
	
	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы();
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	РедакторМонако.КонструкторЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаКлиенте(Команда)
	
	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКод(Код, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаСервере(Команда)

	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКодНаСервере(Код, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборФайлаИСохранение(ЗавершениеРаботы)
	
	ПараметрыОповещения = Новый Структура("ЗавершениеРаботы", ЗавершениеРаботы);
	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляСохранения", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Фильтр = "BSL|*.bsl";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		СохранитьКодВФайл();
	Иначе
		ВыполнитьВыборФайлаИСохранение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если ЕстьКод() Тогда
		ВыполнитьВыборФайлаИСохранение(Ложь);
	Иначе
		ПоказатьПредупреждение(, "Нет кода для сохранения!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если ЕстьКод() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросЗаменыКодомИзФайла", ЭтотОбъект);
		ТекстВопроса = "При загрузке из файла текущий код будет заменен. Всё равно продолжить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхождения(Команда)
	
	РедакторМонако.КомандаРедактора("editor.action.changeAll");
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПросмотр(Команда)
	
	ТолькоПросмотр = НЕ ТолькоПросмотр;
	РедакторМонако.РедакторТолькоПросмотр(ТолькоПросмотр);
	УправлениеВозможностьюРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеСниппеты(Команда)
	
	JSON = ПолучитьТекстМакета("ПользовательскиеСниппеты", Истина);
	Результат = РедакторМонако.ОбновитьПользовательскиеСниппеты(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские сниппеты успешно загружены!");
	Иначе
		ВывестиОшибку("Не удалось загрузить сниппеты: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаШаблонаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		
		//@skip-check type-not-defined
		Файл = Новый ЧтениеТекста(Файлы[0], КодировкаТекста.UTF8);
		СтрокаШаблона = "";
		Строка = Файл.ПрочитатьСтроку();
		
		Пока Строка <> Неопределено Цикл
			СтрокаШаблона = СтрокаШаблона + Строка + Символы.ПС;
			Строка = Файл.ПрочитатьСтроку();
		КонецЦикла;
		
		Файл.Закрыть();
		РедакторМонако.ЗагрузитьШаблоныКода(СтрокаШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСниппетыИзФайла(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаШаблонаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "Шаблоны 1С|*.st";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеОбъекты(Команда)
	
	Объекты = ПолучитьПользовательскиеОбъекты();
	
	Если Объекты <> Неопределено Тогда
		
		Результат = РедакторМонако.ЗагрузитьОбъектыМетаданных(Объекты);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			СообщитьПользователю("Пользовательские объекты успешно загружены!");
		Иначе
			ВывестиОшибку("Не удалось загрузить пользовательские объекты: " + Символы.ПС + Результат.errorDescription, Ложь);
		КонецЕсли;
		
	Иначе
		
		Ошибка = "Не удалось получить пользовательские объекты, видимо в конфигурации нет справочников или документов";
		ВывестиОшибку(Ошибка, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПодсказок(Команда)
	
	РедакторМонако.ПереключитьЯзык(); //FIXME: Возможно без параметра работать не будет
	АнглийскийЯзык = НЕ АнглийскийЯзык;
	УправлениеЯзыкомПодсказок();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеПодсказки(Команда)
	
	БыстрыеПодсказки = НЕ БыстрыеПодсказки;
	РедакторМонако.ИспользоватьБыстрыеПодсказки(БыстрыеПодсказки);
	УправлениеБыстрымиПодсказками();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	РедакторМонако.ВидимостьКартыКода(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = НЕ ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	ОтображатьПробелыИТабуляции = НЕ ОтображатьПробелыИТабуляции;
	РедакторМонако.ВидимостьСтрокиСостояния(Истина); //Федос непонятно, зачем тут это включать
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеРежимаЗапроса(Команда)
	
	Если Не РежимЗапроса Тогда
		
		Если ЕстьКод() Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросЗаменыКодаЗапросом", ЭтотОбъект);
			ТекстВопроса = "При переключении в режим запроса текущий код будет очищен. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РежимЗапроса = Не РежимЗапроса;
	
	ПереключитьРежимЗапроса();
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПодсказки(Имя, Текст, Тип, Описание, Документация)
	
	Подсказка = Новый Структура();
	Подсказка.Вставить("name"          , Имя);
	Подсказка.Вставить("text"          , Текст);
	Подсказка.Вставить("kind"          , Тип);
	Подсказка.Вставить("detail"        , Описание);
	Подсказка.Вставить("documentation" , Документация);
	
	Возврат Подсказка;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПользовательскиеПодсказки(Команда)
	
	Подсказка1 = СтруктураПодсказки("Подсказка №1", "Подсказка №1 вставляемый текст", "Class",
	                 "Расширенная подсказка #1", "Документация #1");
	Подсказка2 = СтруктураПодсказки("Подсказка №2", "Подсказка №2 ()", "Method",
	                 "Расширенная подсказка #2", "Документация #2");
	Подсказка3 = СтруктураПодсказки("Подсказка №3", "Подсказка №3", "Struct",
	                 "Расширенная подсказка #3", "Документация #3");
	
	Подсказки = Новый Структура();
	Подсказки.Вставить("Подсказка1", Подсказка1);
	Подсказки.Вставить("Подсказка2", Подсказка2);
	Подсказки.Вставить("Подсказка3", Подсказка3);
	
	//@skip-check type-not-defined
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();	
	//@skip-check undefined-function-or-procedure
	ЗаписатьJSON(Файл, Подсказки);
	JSON = Файл.Закрыть();
	
	РедакторМонако.ПоказатьПользовательскиеПодсказки(JSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазмерШрифта(Команда)
	
	РедакторМонако.УстановитьРазмерШрифта(20);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)

	Элементы.ПоказатьСкрытьНастройки.Пометка = Не Элементы.ПоказатьСкрытьНастройки.Пометка;
	УправлениеВидимостьюНастроек();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбщиеМодули(Команда)
	
	РедакторМонако.ЗагрузитьОбщиеМодули();

КонецПроцедуры

&НаКлиенте
Процедура СравнитьСОригиналом(Команда)
	
	ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла, "СравнитьСОригиналомЧтениеЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРежимСравнения(Команда)
	
	ЭтаФорма.КоманднаяПанель.Видимость = Истина;
	Элементы.КоманднаяПанельСравнения.Видимость = Ложь;
	РедакторМонако.РежимСравнения("");
	РедакторМонако.УстановитьИсходныйТекст(ОригинальныйКод);	
	РедакторМонако.РедакторТолькоПросмотр(ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееРасхождение(Команда)
	
	РедакторМонако.СледующееИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееРасхождение(Команда)
	
	РедакторМонако.СледующееИзменение(-1);
	
КонецПроцедуры

#КонецОбласти

#Область РежимРаботы

&НаКлиенте
Процедура ПриПереключенииРежимаЗапроса()
	
	Если РежимЗапроса Тогда
		Элементы.ПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования кода";
	Иначе
		Элементы.ПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования запроса";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимЗапроса()
	
	ПриПереключенииРежимаЗапроса();
	
	ИдентификаторРежима = ?(РежимЗапроса, "bsl_query", "bsl");
	
	РедакторМонако.УстановитьРежим(ИдентификаторРежима);
	
	Если РежимЗапроса Тогда
		ТекстЗапроса = ПолучитьТекстМакета("МакетЗапроса", Ложь);
		РедакторМонако.ОбновитьТекст(ТекстЗапроса, Ложь);
	Иначе
		РедакторМонако.ОбновитьТекст("", Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодаЗапросом(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РежимЗапроса = Не РежимЗапроса;
		ПереключитьРежимЗапроса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаСервереБезКонтекста
Функция КлючОбъектаНастроек()
	
	Возврат "bsl_console";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяПоследнегоФайла()
	
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъектаНастроек(), "ИмяСохраненногоФайла");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьИмяПоследнегоФайла(ИмяФайла)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъектаНастроек(), "ИмяСохраненногоФайла", ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодВФайл()
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		ЗаписатьКодВФайл(ИмяСохраненногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВФайл(ИмяФайла)
	
	Текст = ПолучитьТекст();
	//@skip-check type-not-defined
	Файл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, "", Ложь, "");
	Файл.ЗаписатьСтроку(Текст);
	Файл.Закрыть();
	ОригинальныйКод = Текст;
	РедакторМонако.УстановитьИсходныйТекст(ОригинальныйКод);
	УправлениеВидимостьюСравнения();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляСохранения(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ЗаписатьКодВФайл(ИмяСохраненногоФайла);
		
		Если ДопПараметры.ЗавершениеРаботы Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЧтенияФайлаСКодом(ДопПараметры) Экспорт
	
	РедакторМонако.ОчиститьТекст();
	Текст = ДопПараметры.ПолучитьТекст();
	РедакторМонако.УстановитьТекст(Текст, Неопределено, Ложь);
	ОригинальныйКод = Текст;
	РедакторМонако.УстановитьИсходныйТекст(ОригинальныйКод);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСОригиналомЧтениеЗавершение(ДопПараметры) Экспорт
	
	Элементы.КоманднаяПанельСравнения.Видимость = Истина;
	ЭтаФорма.КоманднаяПанель.Видимость = Ложь;
	РедакторМонако.РежимСравнения(ДопПараметры.ПолучитьТекст(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьКодИзСохраненногоФайла(ИмяФайла, ИмяОбработчика = "ПриЗавершенииЧтенияФайлаСКодом")
	
	Файл = Новый ТекстовыйДокумент();
	Оповещение = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект, Файл);
	Файл.НачатьЧтение(Оповещение, ИмяСохраненногоФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляЗагрузки(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла);
		УправлениеВидимостьюСравнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьКод()
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКодИзФайла()
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляЗагрузки", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "BSL|*.bsl";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодомИзФайла(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновленияСохраненияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьВыборФайлаИСохранение(Истина);
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановленияДанныхИзФайлаЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла);
		УправлениеВидимостьюСравнения();
	Иначе
		ИмяСохраненногоФайла = "";
		СохранитьИмяПоследнегоФайла(ИмяСохраненногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСохраненныеДанные()
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановленияДанныхИзФайлаЗавершение", ЭтотОбъект);
		ТекстВопроса = "Восстановить код из последнего сохраненного файла?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеНастройками

&НаКлиенте
Процедура УправлениеВидимостьюНастроек()
	
	Элементы.Настройки.Видимость = Элементы.ПоказатьСкрытьНастройки.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура ВыборКаталогаИсходногоКодаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		РедакторМонако.КаталогИсходногоКодаКонфигурации(Файлы[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыборКаталогаИсходногоКодаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = РедакторМонако.КаталогИсходногоКодаКонфигурации();
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область Прочее 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПараметрыОповещения = Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль);
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьПредупреждение(Оповещение, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования()
	
	Элементы.ТолькоПросмотр.Пометка = НЕ ТолькоПросмотр;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	Элементы.КонструкторЗапроса.Доступность = ДоступностьКнопок;
	Элементы.ЗаменитьВхождения.Доступность = ДоступностьКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЯзыкомПодсказок()
	
	Если АнглийскийЯзык Тогда
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на русский язык";
	Иначе
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на английский язык";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	РедакторМонако.УстановитьТему(Тема, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст =  СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = РедакторМонако.ЗагрузитьПользовательскиеФункции(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	
	Если ДопПараметры.СтандартноеЗакрытие Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль(СтандартноеЗакрытие)
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		ПараметрыОповещения = Новый Структура("СтандартноеЗакрытие", СтандартноеЗакрытие);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект, ПараметрыОповещения);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Если СтандартноеЗакрытие Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)

	Реквизит = Новый Структура();
	Реквизит.Вставить("name", Имя);
	
	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref" , Ссылка);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()
	
	Элементы.БыстрыеПодсказки.Пометка = БыстрыеПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
	РедакторМонако.ВидимостьСтрокиСостояния(ВидимостьСтрокиСостояния);
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	РедакторМонако.ОтображатьПробелы(ОтображатьПробелыИТабуляции);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСравнения()
	
	Элементы.СравнитьСОригиналом.Видимость = ЗначениеЗаполнено(ИмяСохраненногоФайла);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПолучитьПолноеИмяФормы(НужноеИмяФормы)
	
	ПозицияТочки = СтрНайти(ИмяФормы, ".", НаправлениеПоиска.СКонца);
	Результат = Лев(ИмяФормы, ПозицияТочки) + НужноеИмяФормы;
	Возврат Результат;
	
КонецФункции


#Область ПолучениеЗначенийПеременныхДляПодсказокПриНаведении

&НаСервереБезКонтекста
Функция ДополнитьСтроку(Знач Результат, СимволовДополнить, Дополнение = " ", Слева = Истина)
	
	Стр = "";
	
	Для Сч = 1 По СимволовДополнить Цикл
		Стр = Стр + Дополнение;
	КонецЦикла;
	
	Возврат ?(Слева, Стр + Результат, Результат + Стр);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(Ссылка)
	
	ЭтоСсылка = Ложь;
	
	ТипЗнч = ТипЗнч(Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		Массив = СтрРазделить(ПолноеИмя, ".");
		Массив[0] = Массив[0] + "Ссылка";
		ИмяТипа = СтрСоединить(Массив, ".");
		
		Попытка
			ЭтоСсылка = (ТипЗнч = Тип(ИмяТипа));
		Исключение
			ЭтоСсылка = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЭтоСсылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбъектаМетаданных(Ссылка)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".").Получить(0);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоТабличнаяЧасть(Ссылка)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	
	Если Результат <> Неопределено Тогда
		
		Если ОбъектМетаданныхИмеетТЧ(Результат.Родитель().ПолноеИмя()) Тогда
			Возврат Результат.Родитель().ТабличныеЧасти.Найти(Результат.Имя) <> Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСтрокаТабличнойЧасти(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		ИмяРодителя = Родитель.ПолноеИмя();
		
		Если ОбъектМетаданныхИмеетТЧ(ИмяРодителя) Тогда
			
			ЧастиИмени = СтрРазделить(ИмяРодителя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Если ТабличнаяЧасть <> Неопределено Тогда
				
				ИмяТипа = СтрШаблон("%1ТабличнаяЧастьСтрока.%2.%3", Имя1, Имя2, ТабличнаяЧасть.Имя);
				
				Попытка
					Возврат (ТипЗнч = Тип(ИмяТипа));
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗаписьНабораЗаписей(Ссылка)
	
	ТипЗнч = ТипЗнч(Ссылка);
	Результат = Метаданные.НайтиПоТипу(ТипЗнч);
	
	Если Результат <> Неопределено Тогда
		
		ПолноеИмя = Результат.ПолноеИмя();
		
		Если 0 < СтрНайти(ПолноеИмя, "Регистр") Или 0 < СтрНайти(ПолноеИмя, "Register") Тогда
			
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Имя1 = ЧастиИмени.Получить(0);
			Имя2 = ЧастиИмени.Получить(1);
			ИмяТипа = СтрШаблон("%1Запись.%2", Имя1, Имя2);
			
			Попытка
				Возврат (ТипЗнч = Тип(ИмяТипа));
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтрокиТабличнойЧасти(Строка)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Строка));
	
	Если Результат <> Неопределено Тогда
		
		Родитель = Результат.Родитель();
		
		Если ОбъектМетаданныхИмеетТЧ(Родитель.ПолноеИмя()) Тогда
			
			ТабличнаяЧасть = Родитель.ТабличныеЧасти.Найти(Результат.Имя);
			
			Реквизиты.Добавить(Новый Структура("Имя", "НомерСтроки"));
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				Реквизиты.Добавить(Реквизит);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНабораЗаписей(Запись)
	
	Реквизиты = Новый Массив();
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Запись));
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого Измерение Из Результат.Измерения Цикл
			Реквизиты.Добавить(Измерение);
		КонецЦикла;
		
		Для Каждого Ресурс Из Результат.Ресурсы Цикл
			Реквизиты.Добавить(Ресурс);
		КонецЦикла;
		
		Для Каждого Реквизит Из Результат.Реквизиты Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМенеджерЗаписиРегистра(Значение)
	
	ЭтоМенеджерЗаписи = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоМенеджерЗаписи = (Тип("РегистрСведенийМенеджерЗаписи." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоМенеджерЗаписи = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоМенеджерЗаписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНаборЗаписейРегистра(Значение)
	
	ЭтоНаборЗаписей = Ложь;
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если Результат <> Неопределено Тогда
		
		Имя = Результат.ПолноеИмя();
		
		Если СтрНайти(Имя, "РегистрСведений") = 1 И Метаданные.РегистрыСведений.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрСведенийНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрНакопления") = 1 И Метаданные.РегистрыНакопления.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрНакопленияНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрРасчета") = 1 И Метаданные.РегистрыРасчета.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрРасчетаНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		ИначеЕсли СтрНайти(Имя, "РегистрБухгалтери") = 1 И Метаданные.РегистрыБухгалтерии.Содержит(Результат) Тогда
			ЭтоНаборЗаписей = (Тип("РегистрБухгалтерииНаборЗаписей." + Результат.Имя) = ТипЗнч(Значение));
		Иначе
			ЭтоНаборЗаписей = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоНаборЗаписей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоПеречисление(Значение)
	
	Результат = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Возврат Результат <> Неопределено И СтрНайти(Результат.ПолноеИмя(), "Перечисление") = 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСсылки(Значение, КешСсылок, htmlTag)
	
	Представление = КешСсылок[Значение];
	
	Если Представление = Неопределено Тогда
		
		Попытка
			Если Не Значение.Пустая() Тогда
				Ссылка = ПолучитьНавигационнуюСсылку(Значение);
				Если htmlTag Тогда
					Представление = СтрШаблон("<a href='%1'>%2</a>", Ссылка, Строка(Значение));
				Иначе
					Представление = СтрШаблон("[%1](%2)", Строка(Значение), Ссылка);
				КонецЕсли;
			Иначе
				Представление = "";
			КонецЕсли;
		Исключение
			Представление = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		КешСсылок[Значение] = Представление;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", Заголовок, Значение.Количество()));
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из Значение Цикл
		
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Значение.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(СтрокаТЗ[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, СтрокаДерева, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	Индекс = 0;
	
	Для Каждого Строка Из СтрокаДерева.Строки Цикл
	
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + "Строка: " + Индекс);
		
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Маркер = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
			МассивСтрок.Добавить(Маркер + Колонка.Имя + ": " + ПолучитьПредставлениеПеременной(Строка[Колонка.Имя], Смещение, КешСсылок));
		КонецЦикла;  
				
		Индекс = Индекс + 1; 
		
		МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Строка, Смещение + 1, КешСсылок));
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДереваЗначений(Дерево, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2):**", "Дерево значений", Дерево.Строки.Количество()));
	МассивСтрок.Добавить(ПолучитьПредставлениеСтрокиДереваЗначений(Дерево, Дерево, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок)
	
	Таблица = Значение.Владелец();
	
	Представление = "**Строка таблицы значений:**" + Символы.ПС;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Представление = Представление + Символы.ПС;
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		Представление = Представление + Маркер + Колонка.Имя + ": ";
		Представление = Представление + ПолучитьПредставлениеПеременной(Значение[Колонка.Имя], Смещение, КешСсылок);
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок)
	
	ТипЗнч = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч);
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(СтрШаблон("**%1:**", ТипЗнч));
	МассивСтрок.Добавить(Символы.ПС);
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Реквизиты Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Для Каждого Измерение Из ОбъектМетаданных.Ресурсы Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Измерение.Имя + ": " + ПолучитьПредставлениеПеременной(Значение[Измерение.Имя], Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаЗначенийМассива(МассивСписок, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	
	ТипЗнч = ТипЗнч(МассивСписок);
	ЭтоМассив = (ТипЗнч = Тип("Массив"));
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч, МассивСписок.Количество()) + Символы.ПС);
	Индекс = 0;
	
	Для Каждого Значение Из МассивСписок Цикл
		
		Маркер = ДополнитьСтроку("- (" + Индекс + ") ", Смещение * 4, " ");
		
		Если ЭтоМассив Тогда
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение, Смещение, КешСсылок));
		Иначе
			МассивСтрок.Добавить(Маркер + ПолучитьПредставлениеПеременной(Значение.Значение, Смещение, КешСсылок));
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЭлементаСпискаЗначений(ЭлементСписка, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Элемент списка значений**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(ЭлементСписка.Значение, Смещение, КешСсылок));
	
	Представление = ЭлементСписка.Представление;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = Строка(ЭлементСписка.Значение);
	КонецЕсли;
	
	МассивСтрок.Добавить(Маркер + "Представление: " + Представление);
	МассивСтрок.Добавить(Маркер + "Пометка: " + ЭлементСписка.Пометка);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаЗначения(КлючЗначение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Ключ и значение**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	МассивСтрок.Добавить(Маркер + "Ключ: " + КлючЗначение.Ключ);
	МассивСтрок.Добавить(Маркер + "Значение: " + ПолучитьПредставлениеПеременной(КлючЗначение.Значение, Смещение, КешСсылок));
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить(СтрШаблон("**%1 (%2)**:", ТипЗнч(Значение), Значение.Количество()));
		
	Для Каждого Стр Из Значение Цикл
		Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
		МассивСтрок.Добавить(Маркер + Стр.Ключ + ": " + ПолучитьПредставлениеПеременной(Стр.Значение, Смещение, КешСсылок));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеЗапроса(Запрос, Смещение, КешСсылок)
	
	МассивСтрок = Новый Массив();
	МассивСтрок.Добавить("**Запрос**:");
	
	Маркер = ДополнитьСтроку("- ", Смещение * 4, " ");
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Не установлен");
	Иначе
		МассивСтрок.Добавить(Маркер + "МенеджерВременныхТаблиц: Установлен");
	КонецЕсли;
	
	ПредставлениеПараметров = ПолучитьПредставлениеСтруктурыСоответствия(Запрос.Параметры, Смещение + 1, КешСсылок);
	МассивСтрок.Добавить(ПредставлениеПараметров);
	
	МаркерТекста = ДополнитьСтроку("- ", (Смещение + 1) * 4, " ");
	МассивСтрок.Добавить(Маркер + "Текст: " + Символы.ПС + МаркерТекста + Запрос.Текст);
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременной(Значение, Знач Смещение, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	
	Смещение = Смещение + 1;
	
	Если ТипЗнч = Тип("Число") Или
		ТипЗнч = Тип("Строка") Или
		ТипЗнч = Тип("Булево") Или
		ТипЗнч = Тип("Дата") Тогда
		Представление = Строка(Значение);
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Представление = "Null";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = ПолучитьПредставлениеСтруктурыСоответствия(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = ПолучитьПредставлениеСпискаЗначенийМассива(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = ПолучитьПредставлениеКлючаЗначения(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = ПолучитьПредставлениеЭлементаСпискаЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Заголовок = НСтр("en = 'Value table'; ru = 'Таблица значений'");
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение, Заголовок, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = ПолучитьПредставлениеДереваЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Представление = ПолучитьПредставлениеСтрокиТаблицыЗначений(Значение, Смещение, КешСсылок);
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Представление = Строка(Значение);
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = ПолучитьПредставлениеЗапроса(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеТаблицыЗначений(Значение.Выгрузить(), ТипЗнч, Смещение, КешСсылок);
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Представление = ПолучитьПредставлениеМенеджераЗаписейРегистра(Значение, Смещение, КешСсылок);
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Ложь);
	Иначе
		Представление = Строка(Значение);
		Если ПустаяСтрока(Представление) Тогда
			Представление = Строка(ТипЗнч);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(ЗначенияПеременных)
	
	Описание = Новый Структура();
	КешСсылок = Новый Соответствие();
	
	Для Каждого Обход ИЗ ЗначенияПеременных Цикл
		Представление = ПолучитьПредставлениеПеременной(Обход.Значение, -1, КешСсылок);
		Описание.Вставить(Обход.Ключ, Представление);
	КонецЦикла;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область ПолучениеЗначенийПеременныхДляВыводаВТабло

&НаСервереБезКонтекста
Функция ПолучитьКартинкуДляПредставленияСсылки(Ссылка)
	
	ИмяОбъекта = ПолучитьИмяОбъектаМетаданных(Ссылка);
	
	Имена = Новый Соответствие();
	Имена.Вставить("Справочник", "catalog");
	Имена.Вставить("Catalog", "catalog");
	Имена.Вставить("Документ", "document");
	Имена.Вставить("Document", "document");
	Имена.Вставить("БизнесПроцесс", "bprocess");
	Имена.Вставить("BusinessProcess", "bprocess");
	Имена.Вставить("Задача", "task");
	Имена.Вставить("Task", "task");
	
	Картинка = Имена[ИмяОбъекта];
	
	Если Картинка = Неопределено Тогда
		Картинка = "structure";
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьКДанным, КешСсылок)
	
	Представление = "";
	ТипЗнч = ТипЗнч(Значение);
	Картинка = "";
	Класс = "";
	
	Если ТипЗнч = Тип("Число") Тогда
		Представление = Строка(Значение);
		Картинка = "int";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Строка") Тогда
		Представление = Строка(Значение);
		Картинка = "string";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Булево") Тогда
		Представление = Строка(Значение);
		Картинка = "boolean";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Дата") Тогда
		Картинка = "date";
		Представление = Строка(Значение);
		Класс = "final";
	ИначеЕсли Значение = Неопределено Тогда
		Представление = "Неопределено";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Null") Тогда
		Картинка = "null";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("УникальныйИдентификатор") Тогда
		Представление = Строка(Значение);
		Картинка = "uuid";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ДвоичныеДанные") Тогда
		Картинка = "binary";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Картинка") Тогда
		Картинка = "picture";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("Структура") Или
		ТипЗнч(Значение) = Тип("Соответствие") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("Массив") Или
		ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "array";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "keyvalue";
	ИначеЕсли ТипЗнч = Тип("ТаблицаЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
		Картинка = "table";
	ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
		Представление = СтрШаблон("%1 (%2)", Строка(ТипЗнч), Значение.Строки.Количество());
		Картинка = "tree";
		Если Значение.Строки.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
		Представление = "";
		Картинка = "tree";
	ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
		Картинка = "storage";
	ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
		Представление = Строка(ТипЗнч);
		Картинка = "query";
	ИначеЕсли ТипЗнч = Тип("МенеджерВременныхТаблиц") Тогда
		Представление = "";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
		Представление = СтрШаблон("Движения (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ТипЗнч = Тип("ТабличныйДокумент") Тогда
		Картинка = "tabular";
		Класс = "final";
	ИначеЕсли ТипЗнч = Тип("ТекстовыйДокумент") Или
		ТипЗнч = Тип("ЧтениеТекста") Или
		ТипЗнч = Тип("ЧтениеXML") Или
		ТипЗнч = Тип("ЧтениеJSON") Или
		ТипЗнч = Тип("ЧтениеHTML") Или
		ТипЗнч = Тип("ЗаписьJSON") Или
		ТипЗнч = Тип("ЗаписьXML") Или
		ТипЗнч = Тип("ЗаписьТекста") Или
		ТипЗнч = Тип("ЧтениеZipФайла") Или
		ТипЗнч = Тип("Файл") Тогда
		Картинка = "text";
		Класс = "final";
	ИначеЕсли ЭтоПеречисление(Значение) Тогда
		Представление = Строка(Значение);
		Картинка = "enum";
		Класс = "final";
	ИначеЕсли ЭтоСтрокаТабличнойЧасти(Значение) Тогда
		Представление = "";
		Картинка = "table";
	ИначеЕсли ЭтоТабличнаяЧасть(Значение) Тогда
		Представление = СтрШаблон("Табличная часть (%1)", Значение.Количество());
		Картинка = "table";
	ИначеЕсли ЭтоЗаписьНабораЗаписей(Значение) Тогда
		Картинка = "table";
	ИначеЕсли ЭтоНаборЗаписейРегистра(Значение) Тогда
		Представление = СтрШаблон("Набор записей (%1)", Значение.Количество());
		Картинка = "table";
		Если Значение.Количество() = 0 Тогда
			Класс = "final";
		КонецЕсли;
	ИначеЕсли ЭтоМенеджерЗаписиРегистра(Значение) Тогда
		Картинка = "structure";
	ИначеЕсли ЭтоСсылка(Значение) Тогда
		Представление = ПолучитьПредставлениеСсылки(Значение, КешСсылок, Истина);
		Если СтрНайти(Представление, "</a>") Тогда
			Представление = СтрЗаменить(Представление, """", "");
			Представление = СтрЗаменить(Представление, Символы.Таб, "");
		КонецЕсли;
		Картинка = ПолучитьКартинкуДляПредставленияСсылки(Значение);
	Иначе
		Попытка
			Представление = Строка(Значение);
		Исключение
			Представление = Строка(ТипЗнч);
		КонецПопытки;
		Класс = "final";
	КонецЕсли;
	
	Переменная = Новый Структура();
	Переменная.Вставить("label", Имя);
	Переменная.Вставить("value", Представление);
	Переменная.Вставить("type" , Строка(ТипЗнч));
	Переменная.Вставить("path" , ПутьКДанным);
	Переменная.Вставить("class", Класс);
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		Переменная.Вставить("icon", Картинка + ".png");
	КонецЕсли;
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйИдентификаторПеременной()
	
	Возврат "var_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСсылочнойПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Ссылка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	ОбъектМетаданных = Ссылка.Метаданные();
	ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	
	ЗначениеРеквизита = Ссылка.УникальныйИдентификатор();
	ПутьРеквизита = ПутьКДанным + ".УникальныйИдентификатор";
	ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, "УникальныйИдентификатор", ПутьРеквизита, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя <> "Ссылка" Тогда
				ЗначениеРеквизита = Ссылка[Реквизит.Имя];
				ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
				ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
				ИдентификаторПеременной = НовыйИдентификаторПеременной();
				ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		ЗначениеРеквизита = Ссылка[Реквизит.Имя];
		ПутьРеквизита = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, Реквизит.Имя, ПутьРеквизита, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
	КонецЦикла;
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмяОбъектаМетаданных) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ЗначениеРеквизита = Ссылка[ТабличнаяЧасть.Имя];
			ПутьРеквизита = ПутьКДанным + "." + ТабличнаяЧасть.Имя;
			ДанныеРеквизита = ПолучитьКраткуюСтруктуруПеременной(ЗначениеРеквизита, ТабличнаяЧасть.Имя, ПутьРеквизита, КешСсылок);
			ИдентификаторПеременной = НовыйИдентификаторПеременной();
			ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТаблицыЗначений(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ТаблицаЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЗ, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТаблицыЗначений(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТаблицы, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаТаблицы.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаТаблицы[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиТабличнойЧасти(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаТЧ, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыСтрокиТабличнойЧасти(СтрокаТЧ);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = СтрокаТЧ[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗаписиНабораЗаписей(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеДереваЗначений(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ДеревоЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + ".Строки[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСтрокиДереваЗначений(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ЗначениеКолонки = СтрокаДерева[Колонка.Имя];
		ПутьСтроки = ПутьКДанным + "." + Колонка.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Колонка.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Если 0 < СтрокаДерева.Строки.Количество() Тогда
		ПутьСтроки = ПутьКДанным + ".Строки";
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева.Строки, "Строки", ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЕсли;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииСтрокДереваЗначений(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(КоллекцияСтрок, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Индекс = 0;
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		Имя = "Строка " + Индекс;
		ПутьСтроки = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеСтроки = ПолучитьКраткуюСтруктуруПеременной(СтрокаДерева, Имя, ПутьСтроки, КешСсылок);
		Индекс = Индекс + 1;
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеСтроки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСоответствияСтруктуры(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Соответствие, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ЭтоСоответствие = (ТипЗнч(Соответствие) = Тип("Соответствие"));
	ДанныеПеременной = Новый Структура();
	
	Для Каждого Обход Из Соответствие Цикл
		
		Если ЭтоСоответствие Тогда
			ПутьЗначения = ПутьКДанным + "[&quote;" + Обход.Ключ + "&quote;]";
		Иначе
			ПутьЗначения = ПутьКДанным + "." + Обход.Ключ;
		КонецЕсли;
		
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
		
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМассива(Массив, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Массив, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Значение Из Массив Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКлючаИЗначения(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Ключ";
	Имя = "Ключ";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Ключ, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(КлючЗначение.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЭлементаСпискаЗначений(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Значение";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Значение, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Пометка";
	Имя = "Пометка";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Пометка, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Представление";
	Имя = "Представление";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(ЭлементСписка.Представление, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСпискаЗначений(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(СписокЗначений, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Обход Из СписокЗначений Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеКоллекцииДвижений(Движения, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Движения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	Индекс = 0;
	
	Для Каждого Движение Из Движения Цикл
		Имя = Формат(Индекс, "ЧН=; ЧГ=0");
		ПутьЗначения = ПутьКДанным + "[" + Формат(Индекс, "ЧН=; ЧГ=0") + "]";
		ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Движение, Имя, ПутьЗначения, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМенеджераЗаписейРегистра(Запись, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запись, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Реквизиты = ПолучитьРеквизитыНабораЗаписей(Запись);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ЗначениеКолонки = Запись[Реквизит.Имя];
		ПутьСтроки = ПутьКДанным + "." + Реквизит.Имя;
		ДанныеКолонки = ПолучитьКраткуюСтруктуруПеременной(ЗначениеКолонки, Реквизит.Имя, ПутьСтроки, КешСсылок);
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеКолонки);
	КонецЦикла;
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеЗапроса(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок)

	Переменная = ПолучитьКраткуюСтруктуруПеременной(Запрос, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	ДанныеПеременной = Новый Структура();
	
	Путь = ПутьКДанным + ".Текст";
	Имя = "Текст";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Текст, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".Параметры";
	Имя = "Параметры";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.Параметры, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Путь = ПутьКДанным + ".МенеджерВременныхТаблиц";
	Имя = "МенеджерВременныхТаблиц";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Запрос.МенеджерВременныхТаблиц, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеПеременной.Вставить(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеПеременной);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеХранилищаЗначения(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок)
	
	Данные = ХранилишеЗначения.Получить();
	
	Переменная = ПолучитьКраткуюСтруктуруПеременной(ХранилишеЗначения, ИмяПеременной, ПутьКДанным, КешСсылок);
	
	Путь = ПутьКДанным + ".Получить()";
	Имя = "Значение";
	ДанныеЗначения = ПолучитьКраткуюСтруктуруПеременной(Данные, Имя, Путь, КешСсылок);
	ИдентификаторПеременной = НовыйИдентификаторПеременной();
	ДанныеХранилища = Новый Структура(ИдентификаторПеременной, ДанныеЗначения);
	
	Переменная.Вставить("children", ДанныеХранилища);
	
	Возврат Переменная;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременной(ИдентификаторПеременной, ИмяПеременной, ПутьКДанным, АдресХраненияПеременных)
	
	Данные = ПолучитьИзВременногоХранилища(АдресХраненияПеременных);
	ХранилищеПеременных = Данные.ХранилищеПеременных;
	КешСсылок = Данные.КэшСсылок;
	
	Попытка
		
		Описание = Неопределено;
		Путь = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИдентификаторПеременной);
		Путь = СтрЗаменить(Путь, "&quote;", """");
		//@skip-check server-execution-safe-mode
		ЗначениеПеременной = Вычислить("ХранилищеПеременных." + Путь);
		Путь = СтрЗаменить(Путь, """", "&quote;");
		ТипЗнч = ТипЗнч(ЗначениеПеременной);
		
		Если ТипЗнч = Тип("ТаблицаЗначений") Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаТаблицыЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ДеревоЗначений") Тогда
			Описание = ПолучитьОписаниеДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СтрокаДереваЗначений") Тогда
			Описание = ПолучитьОписаниеСтрокиДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияСтрокДереваЗначений") Тогда
			Описание = ПолучитьОписаниеКоллекцииСтрокДереваЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Соответствие") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Массив") Тогда
			Описание = ПолучитьОписаниеМассива(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			Описание = ПолучитьОписаниеСоответствияСтруктуры(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КлючИЗначение") Тогда
			Описание = ПолучитьОписаниеКлючаИЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("СписокЗначений") Тогда
			Описание = ПолучитьОписаниеСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ЭлементСпискаЗначений") Тогда
			Описание = ПолучитьОписаниеЭлементаСпискаЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("Запрос") Тогда
			Описание = ПолучитьОписаниеЗапроса(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("КоллекцияДвижений") Тогда
			Описание = ПолучитьОписаниеКоллекцииДвижений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ТипЗнч = Тип("ХранилищеЗначения") Тогда
			Описание = ПолучитьОписаниеХранилищаЗначения(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСсылка(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСсылочнойПеременной(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоСтрокаТабличнойЧасти(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеСтрокиТабличнойЧасти(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоТабличнаяЧасть(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоЗаписьНабораЗаписей(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеЗаписиНабораЗаписей(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоНаборЗаписейРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеТаблицыЗначений(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		ИначеЕсли ЭтоМенеджерЗаписиРегистра(ЗначениеПеременной) Тогда
			Описание = ПолучитьОписаниеМенеджераЗаписейРегистра(ЗначениеПеременной, ИмяПеременной, Путь, КешСсылок);
		КонецЕсли;
		
		Если Описание <> Неопределено Тогда
			Результат = Новый Структура(ИдентификаторПеременной, Описание);
			Запись = Новый ЗаписьJSON();
			Запись.УстановитьСтроку();
			ЗаписатьJSON(Запись, Результат);
			Возврат Запись.Закрыть();
		Иначе
			ВызватьИсключение("Неизвестный тип переменной");
		КонецЕсли;
		
		Данные.КэшСсылок = КешСсылок;
		ПоместитьВоВременноеХранилище(Данные, АдресХраненияПеременных);
		
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПеременныхДляВыводВТабло(ЗначенияПеременных, АдресХраненияПеременных)
	
	Описание = Новый Структура();                            
	КешСсылок = Новый Соответствие();
	ХранилищеПеременных = Новый Структура();
	
	Для Каждого Обход ИЗ ЗначенияПеременных Цикл
		ИдентификаторПеременной = НовыйИдентификаторПеременной();
		Переменная = ПолучитьКраткуюСтруктуруПеременной(Обход.Значение, Обход.Ключ, "", КешСсылок);
		Описание.Вставить(ИдентификаторПеременной, Переменная);
		ХранилищеПеременных.Вставить(ИдентификаторПеременной, Обход.Значение);
	КонецЦикла;
	
	Данные = Новый Структура();
	Данные.Вставить("ХранилищеПеременных", ХранилищеПеременных);
	Данные.Вставить("КэшСсылок", КешСсылок);
	
	АдресХраненияПеременных = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор());
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Описание);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = РедакторМонако Тогда
		Если ИмяСобытия = "РедакторТекстаПриИзменении" Тогда
			РедакторТекстаПриИзменении();
		ИначеЕсли ИмяСобытия = "ОткрытиеКонструктораЗапросов" Тогда
			ЗаблокироватьФормуДоЗакрытияКонструктора(Истина);
		ИначеЕсли ИмяСобытия = "ЗакрытиеКонструктораЗапросов" Тогда
			ЗаблокироватьФормуДоЗакрытияКонструктора(Ложь); 
		ИначеЕсли ИмяСобытия = "АктивизироватьРедактор" Тогда
		ИначеЕсли ИмяСобытия = "Ошибка" Тогда
			ОбработатьОшибкуРедактора(Параметр);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуРедактора(ДанныеОшибки)
	
	Инфо = ДанныеОшибки.ИнформацияОбОшибке;
	Пока Инфо.Причина <> Неопределено Цикл
		Инфо = Инфо.Причина;
	КонецЦикла;
	
	Ошибка = ПолучитьОшибку(Инфо.Описание);

	НомерСтроки = Ошибка.НомерСтроки;
	НомерКолонки = Ошибка.НомерКолонки;

	Если НомерСтроки = 0 Тогда
		НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Инфо.Описание);
	КонецЕсли;

	Если НомерСтроки = 0 Тогда
		НомерСтроки = РедакторМонако.НайтиСтрокуВКоде(Инфо.ИсходнаяСтрока);
	КонецЕсли;

	СообщитьПользователю(Ошибка.ТекстОшибки);

	Если 0 < НомерСтроки Тогда
		РедакторМонако.ОтметитьОшибку(НомерСтроки + ДанныеОшибки.Сдвиг.СдвигСтрока, НомерКолонки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторТекстаПриИзменении() 
	
	Модифицированность = Истина;
	
КонецПроцедуры 


&НаКлиенте
Процедура ЗаблокироватьФормуДоЗакрытияКонструктора(Блокировать)
	
	ТолькоПросмотр = Не Блокировать;
	ТолькоПросмотр(Неопределено);
	
КонецПроцедуры

