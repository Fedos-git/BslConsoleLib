#Область ВыполнениеКода

&НаКлиенте
Функция ПолучитьОшибку(ОписаниеОшибки)
	
	Ошибка = Новый Структура("ТекстОшибки, НомерСтроки, НомерКолонки", ОписаниеОшибки, 0, 1);
	
	ПозицияРазделителя = СтрНайти(ОписаниеОшибки, ":");
	
	Если 0 < ПозицияРазделителя Тогда
		
		Ошибка.ТекстОшибки = СокрЛП(Сред(ОписаниеОшибки, ПозицияРазделителя + 1));
		
		СтрокаОшибки = Лев(ОписаниеОшибки, ПозицияРазделителя - 1);
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "{", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "(", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, ")", "");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "}", "");
		
		Подстроки = СтрЗаменить(СтрокаОшибки, ",", Символы.ПС);
		
		Ошибка.НомерСтроки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 1), 0);
		Ошибка.НомерКолонки = СтрокаВЧисло(СтрПолучитьСтроку(Подстроки, 2), 1);
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуВКоде(Строка)
	
	НомерСтроки = View().findText(Строка);
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьНомерСтрокиИзОписанияОшибки(ОписаниеОшибки)
	
	НомерСтроки = 0;
	ОткрывающаяСкобка = СтрНайти(ОписаниеОшибки, "(");	
	
	Если 0 < ОткрывающаяСкобка Тогда
		
		ЗакрывающаяСкобка = СтрНайти(ОписаниеОшибки, ")", , ОткрывающаяСкобка);
		
		Если 0 < ЗакрывающаяСкобка Тогда
			
			Позиция = Сред(ОписаниеОшибки, ОткрывающаяСкобка + 1, ЗакрывающаяСкобка - ОткрывающаяСкобка - 1);
			Подстроки = СтрРазделить(Позиция, ",");
			
			Попытка
				НомерСтроки = Число(Подстроки[0]);
			Исключение
				НомерСтроки = 0;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполнения(Результат)
	
	View().setCustomCodeLenses("[]");
	
	Если НЕ Результат.Успешно Тогда
		
		Ошибка = ПолучитьОшибку(Результат.ОписаниеОшибки);
		
		НомерСтроки = Ошибка.НомерСтроки;
		НомерКолонки = Ошибка.НомерКолонки;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = ИзвлечьНомерСтрокиИзОписанияОшибки(Результат.ОписаниеОшибки);
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			НомерСтроки = НайтиСтрокуВКоде(Результат.ИсходнаяСтрока);
		КонецЕсли;
		
		СообщитьПользователю(Ошибка.ТекстОшибки);
		
		Если 0 < НомерСтроки Тогда
			View().markError(НомерСтроки, НомерКолонки);
		КонецЕсли;
		
	Иначе
		
		АдресХраненияПеременных = Результат.АдресХраненияПеременных;
		
		Если ЗначениеЗаполнено(Результат.ОписаниеПеременных) Тогда
			
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				
				View().showVariablesDescription(Результат.ОписаниеПеременных);
				
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				
				View().setCustomHovers(Результат.ОписаниеПеременных);
			
				Если Результат.ОписаниеПеременных <> "{}" Тогда
					View().setCustomCodeLenses("[{""lineNumber"": 1,""column"": 1,""text"": ""Для просмотра значений наведите курсор на переменную""}]");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруРезультата()
	
	СтруктуруРезультата = Новый Структура();
	СтруктуруРезультата.Вставить("Успешно", Ложь);
	СтруктуруРезультата.Вставить("ИсходнаяСтрока", "");
	СтруктуруРезультата.Вставить("ОписаниеОшибки", "");
	СтруктуруРезультата.Вставить("ОписаниеПеременных", "");
	СтруктуруРезультата.Вставить("АдресХраненияПеременных", "");
	
	Возврат СтруктуруРезультата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	RVS6e6c2a = ПолучитьСтруктуруРезультата();
	SPd201bf6 = Новый Структура();
	
	Попытка
		Выполнить(Текст);
		RVS6e6c2a.Успешно = Истина;
		АдресПеременных = "";
		Попытка
			Если ПоказыватьЗначенияПеременныхПослеВыполнения = 1 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьОписаниеПеременныхДляВыводВТабло(SPd201bf6, АдресПеременных);
			ИначеЕсли ПоказыватьЗначенияПеременныхПослеВыполнения = 2 Тогда
				RVS6e6c2a.ОписаниеПеременных = ПолучитьПредставлениеПеременныхДляВсплывающихПодсказок(SPd201bf6);
			КонецЕсли;
			RVS6e6c2a.АдресХраненияПеременных = АдресПеременных;
		Исключение
			OS6e6c2a = ИнформацияОбОшибке();
			RVS6e6c2a.ОписаниеПеременных = "";
		КонецПопытки;
	Исключение
		OS6e6c2a = ИнформацияОбОшибке();
		RVS6e6c2a.ИсходнаяСтрока = OS6e6c2a.ИсходнаяСтрока;
		Если OS6e6c2a.Причина <> Неопределено Тогда
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Причина.Описание;
		Иначе
			RVS6e6c2a.ОписаниеОшибки = OS6e6c2a.Описание;
		КонецЕсли;
	КонецПопытки;
	
	Возврат RVS6e6c2a;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКодНаСервере(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения)
	
	Возврат ВыполнитьКод(Текст, ПоказыватьЗначенияПеременныхПослеВыполнения);
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция ПолучитьКодПросмотраПеременных()
	
	Код = ""; 
	
	Если 0 < ПоказыватьЗначенияПеременныхПослеВыполнения Тогда
	
		Переменные = View().getVarsNames();
		
		Если 0 < Переменные.length Тогда
			
			ПС = Символы.ПС;
			
			Для Индекс = 0 По Переменные.length - 1 Цикл
				Имя = Переменные["" + Индекс + ""];
				Код = Код + ПС + "Попытка SPd201bf6.Вставить(""" + Имя + """,Вычислить(""" + Имя + """)); Исключение КонецПопытки;" + ПС;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекст(ДляВыполнения = Ложь)
	
	Код =  View().getText();
	
	Переменные = ?(ДляВыполнения, ПолучитьКодПросмотраПеременных(), "");
	
	Код = Код + Переменные;
	
	Возврат Код;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УправлениеТемами(Команда)
	
	УстановитьПометкуТемы(Команда.Имя);
	ИмяТемы = ПолучитьИмяТемы();
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	ВызватьКонструкторЗапроса(View().getQuery());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаКлиенте(Команда)
	
	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКод(Код, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаСервере(Команда)

	Если СохранятьКодПриВыполнении Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Код = ПолучитьТекст(Истина);
	Результат = ВыполнитьКодНаСервере(Код, ПоказыватьЗначенияПеременныхПослеВыполнения);
	ОбработатьРезультатВыполнения(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборФайлаИСохранение(ЗавершениеРаботы)
	
	ПараметрыОповещения = Новый Структура("ЗавершениеРаботы", ЗавершениеРаботы);
	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляСохранения", ЭтотОбъект, ПараметрыОповещения);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбора.Фильтр = "BSL|*.bsl";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		СохранитьКодВФайл();
	Иначе
		ВыполнитьВыборФайлаИСохранение(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если ЕстьКод() Тогда
		ВыполнитьВыборФайлаИСохранение(Ложь);
	Иначе
		ПоказатьПредупреждение(, "Нет кода для сохранения!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если ЕстьКод() Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросЗаменыКодомИзФайла", ЭтотОбъект);
		ТекстВопроса = "При загрузке из файла текущий код будет заменен. Всё равно продолжить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактора(Команда)
	
	View().editor.trigger("", Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхождения(Команда)
	
	КомандаРедактора("editor.action.changeAll");
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПросмотр(Команда)
	
	ТолькоПросмотр = НЕ ТолькоПросмотр;
	View().setReadOnly(ТолькоПросмотр);
	УправлениеВозможностьюРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеСниппеты(Команда)
	
	JSON = ПолучитьТекстМакета("ПользовательскиеСниппеты", Истина);
	Результат = View().updateSnippets(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские сниппеты успешно загружены!");
	Иначе
		ВывестиОшибку("Не удалось загрузить сниппеты: " + Символы.ПС + Результат.errorDescription, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаШаблонаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		
		Файл = Новый ЧтениеТекста(Файлы[0], КодировкаТекста.UTF8);
		СтрокаШаблона = "";
		Строка = Файл.ПрочитатьСтроку();
		
		Пока Строка <> Неопределено Цикл
			СтрокаШаблона = СтрокаШаблона + Строка + Символы.ПС;
			Строка = Файл.ПрочитатьСтроку();
		КонецЦикла;
		
		Файл.Закрыть();
		View().parseSnippets(СтрокаШаблона);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСниппетыИзФайла(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаШаблонаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "Шаблоны 1С|*.st";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеОбъекты(Команда)
	
	Объекты = ПолучитьПользовательскиеОбъекты();
	
	Если Объекты <> Неопределено Тогда
		
		Результат = View().updateMetadata(Объекты);
		
		Если ТипЗнч(Результат) = Тип("Булево") Тогда
			СообщитьПользователю("Пользовательские объекты успешно загружены!");
		Иначе
			ВывестиОшибку("Не удалось загрузить пользовательские объекты: " + Символы.ПС + Результат.errorDescription, Ложь);
		КонецЕсли;
		
	Иначе
		
		Ошибка = "Не удалось получить пользовательские объекты, видимо в конфигурации нет справочников или документов";
		ВывестиОшибку(Ошибка, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПодсказок(Команда)
	
	View().switchLang();
	АнглийскийЯзык = НЕ АнглийскийЯзык;
	УправлениеЯзыкомПодсказок();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеПодсказки(Команда)
	
	БыстрыеПодсказки = НЕ БыстрыеПодсказки;
	View().enableQuickSuggestions(БыстрыеПодсказки);
	УправлениеБыстрымиПодсказками();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = НЕ ПодсвечиватьЗапросы;
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = НЕ ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = НЕ ВидимостьСтрокиСостояния;
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьПробелыИТабуляции(Команда)
	
	ОтображатьПробелыИТабуляции = НЕ ОтображатьПробелыИТабуляции;
	View().showStatusBar();
	УправлениеВидимостьюПробеловТабуляций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключениеРежимаЗапроса(Команда)
	
	Если Не РежимЗапроса Тогда
		
		Если ЕстьКод() Тогда
			Оповещение = Новый ОписаниеОповещения("ВопросЗаменыКодаЗапросом", ЭтотОбъект);
			ТекстВопроса = "При переключении в режим запроса текущий код будет очищен. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РежимЗапроса = Не РежимЗапроса;
	
	ПереключитьРежимЗапроса();
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПодсказки(Имя, Текст, Тип, Описание, Документация)
	
	Подсказка = Новый Структура();
	Подсказка.Вставить("name"          , Имя);
	Подсказка.Вставить("text"          , Текст);
	Подсказка.Вставить("kind"          , Тип);
	Подсказка.Вставить("detail"        , Описание);
	Подсказка.Вставить("documentation" , Документация);
	
	Возврат Подсказка;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПользовательскиеПодсказки(Команда)
	
	Подсказка1 = СтруктураПодсказки("Подсказка №1", "Подсказка №1 вставляемый текст", "Class",
	                 "Расширенная подсказка #1", "Документация #1");
	Подсказка2 = СтруктураПодсказки("Подсказка №2", "Подсказка №2 ()", "Method",
	                 "Расширенная подсказка #2", "Документация #2");
	Подсказка3 = СтруктураПодсказки("Подсказка №3", "Подсказка №3", "Struct",
	                 "Расширенная подсказка #3", "Документация #3");
	
	Подсказки = Новый Структура();
	Подсказки.Вставить("Подсказка1", Подсказка1);
	Подсказки.Вставить("Подсказка2", Подсказка2);
	Подсказки.Вставить("Подсказка3", Подсказка3);
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();	
	ЗаписатьJSON(Файл, Подсказки);
	JSON = Файл.Закрыть();
	
	View().showCustomSuggestions(JSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРазмерШрифта(Команда)
	
	View().setFontSize(20);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьНастройки(Команда)

	Элементы.ПоказатьСкрытьНастройки.Пометка = Не Элементы.ПоказатьСкрытьНастройки.Пометка;
	УправлениеВидимостьюНастроек();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбщиеМодули(Команда)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			ПараметрыЗагрузки = Новый Структура("КаталогМодулей", КаталогМодулей);
			Оповещение = Новый ОписаниеОповещения("ВопросЗагрузкиОбщихМодулейЗавершение", ЭтотОбъект, ПараметрыЗагрузки);
			ТекстВопроса = "Загрузка всех общих модулей может занять длительное время
			|и потребовать значительных ресурсов памяти. Всё равно продолжить?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СравнитьСОригиналом(Команда)
	
	ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла, "СравнитьСОригиналомЧтениеЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРежимСравнения(Команда)
	
	ЭтаФорма.КоманднаяПанель.Видимость = Истина;
	Элементы.КоманднаяПанельСравнения.Видимость = Ложь;
	View().compare();
	View().setOriginalText(ОригинальныйКод);
	View().setReadOnly(ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееРасхождение(Команда)
	
	View().nextDiff();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееРасхождение(Команда)
	
	View().previousDiff();
	
КонецПроцедуры

#КонецОбласти

#Область РежимРаботы

&НаКлиенте
Процедура ПриПереключенииРежимаЗапроса()
	
	Если РежимЗапроса Тогда
		Элементы.ПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования кода";
	Иначе
		Элементы.ПереключениеРежимаЗапроса.Заголовок = "Переключить в режим редактирования запроса";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимЗапроса()
	
	ПриПереключенииРежимаЗапроса();
	
	ИдентификаторРежима = ?(РежимЗапроса, "bsl_query", "bsl");
	
	View().setLanguageMode(ИдентификаторРежима);
	
	Если РежимЗапроса Тогда
		ТекстЗапроса = ПолучитьТекстМакета("МакетЗапроса", Ложь);
		View().updateText(ТекстЗапроса, Ложь, Ложь);
	Иначе
		View().updateText("", Ложь, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодаЗапросом(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьРежимЗапроса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановление

&НаСервереБезКонтекста
Функция КлючОбъектаНастроек()
	
	Возврат "bsl_console";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяПоследнегоФайла()
	
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъектаНастроек(), "ИмяСохраненногоФайла");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьИмяПоследнегоФайла(ИмяФайла)
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъектаНастроек(), "ИмяСохраненногоФайла", ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКодВФайл()
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		ЗаписатьКодВФайл(ИмяСохраненногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодВФайл(ИмяФайла)
	
	Текст = ПолучитьТекст();
	Файл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8, "", Ложь, "");
	Файл.ЗаписатьСтроку(Текст);
	Файл.Закрыть();
	ОригинальныйКод = Текст;
	View().setOriginalText(ОригинальныйКод);
	УправлениеВидимостьюСравнения();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляСохранения(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ЗаписатьКодВФайл(ИмяСохраненногоФайла);
		
		Если ДопПараметры.ЗавершениеРаботы Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЧтенияФайлаСКодом(ДопПараметры) Экспорт
	
	ОчиститьТекст();
	Текст = ДопПараметры.ПолучитьТекст();
	УстановитьТекст(Текст, Неопределено, Ложь);
	ОригинальныйКод = Текст;
	View().setOriginalText(ОригинальныйКод);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьСОригиналомЧтениеЗавершение(ДопПараметры) Экспорт
	
	Элементы.КоманднаяПанельСравнения.Видимость = Истина;
	ЭтаФорма.КоманднаяПанель.Видимость = Ложь;
	View().compare(ДопПараметры.ПолучитьТекст(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьКодИзСохраненногоФайла(ИмяФайла, ИмяОбработчика = "ПриЗавершенииЧтенияФайлаСКодом")
	
	Файл = Новый ТекстовыйДокумент();
	Оповещение = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект, Файл);
	Файл.НачатьЧтение(Оповещение, ИмяСохраненногоФайла, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаДляЗагрузки(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ИмяСохраненногоФайла = ВыбранныеФайлы[0];
		ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла);
		УправлениеВидимостьюСравнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьКод()
	
	Возврат ЗначениеЗаполнено(СтрЗаменить(СокрЛП(ПолучитьТекст()), Символы.ПС, ""));
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКодИзФайла()
	
	Оповещение = Новый ОписаниеОповещения("ПриВыбореФайлаДляЗагрузки", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр = "BSL|*.bsl";
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыКодомИзФайла(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьКодИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбновленияСохраненияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьКодВФайл();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохраненияЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьВыборФайлаИСохранение(Истина);
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановленияДанныхИзФайлаЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПрочитатьКодИзСохраненногоФайла(ИмяСохраненногоФайла);
		УправлениеВидимостьюСравнения();
	Иначе
		ИмяСохраненногоФайла = "";
		СохранитьИмяПоследнегоФайла(ИмяСохраненногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСохраненныеДанные()
	
	Если ЗначениеЗаполнено(ИмяСохраненногоФайла) Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановленияДанныхИзФайлаЗавершение", ЭтотОбъект);
		ТекстВопроса = "Восстановить код из последнего сохраненного файла?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеНастройками

&НаКлиенте
Процедура УправлениеВидимостьюНастроек()
	
	Элементы.Настройки.Видимость = Элементы.ПоказатьСкрытьНастройки.Пометка;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходныйКод

&НаКлиенте
Процедура ВыборКаталогаИсходногоКодаЗавершение(Файлы, ДопПараметры) Экспорт
	
	Если Файлы <> Неопределено И 0 < Файлы.Количество() Тогда
		Объект.КаталогИсходногоКодаКонфигурации = Файлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыборКаталогаИсходногоКодаЗавершение", ЭтотОбъект);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = Объект.КаталогИсходногоКодаКонфигурации;
	ДиалогВыбора.Показать(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область Прочее 

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = 0)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, ЗначениеПоУмолчанию);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования()
	
	Элементы.ТолькоПросмотр.Пометка = НЕ ТолькоПросмотр;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	Элементы.КонструкторЗапроса.Доступность = ДоступностьКнопок;
	Элементы.ЗаменитьВхождения.Доступность = ДоступностьКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЯзыкомПодсказок()
	
	Если АнглийскийЯзык Тогда
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на русский язык";
	Иначе
		Элементы.ЯзыкПодсказок.Заголовок = "Переключить подсказки на английский язык";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	ИмяТемы = Неопределено;
	
	Имена = Новый Соответствие();
	Имена.Вставить("СветлаяТема", "bsl-white");
	Имена.Вставить("ТемнаяТема", "bsl-dark");
	
	Для Каждого Элемент Из Элементы.Тема.ПодчиненныеЭлементы Цикл
		Если Элемент.Пометка Тогда
			ИмяТемы = Имена[Элемент.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяТемы;
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	View().setTheme(Тема);
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(ИмяМакета)
	
	Возврат ЭтотОбъект().ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаСервере
Функция ПолучитьТекстМакета(ИмяМакета, УдалятьПереносыСтрок)
	
	Макет = ПолучитьМакет(ИмяМакета);
	Текст = Макет.ПолучитьТекст();
	
	Если УдалятьПереносыСтрок Тогда
		Текст =  СтрЗаменить(Текст, Символы.ПС, " ");
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПользовательскиеФункции()
	
	JSON = ПолучитьТекстМакета("ПользовательскиеФункции", Истина);
	Результат = View().updateCustomFunctions(JSON);
	
	Если ТипЗнч(Результат) = Тип("Булево") Тогда
		СообщитьПользователю("Пользовательские функции успешно загружены!");
	Иначе
		Ошибка = "Не удалось загрузить пользовательские функции: " + Символы.ПС + Результат.errorDescription;
		ВывестиОшибку(Ошибка, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураРеквизита(Имя, Ссылка = Неопределено)

	Реквизит = Новый Структура();
	Реквизит.Вставить("name", Имя);
	
	Если Ссылка <> Неопределено Тогда
		Реквизит.Вставить("ref" , Ссылка);
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеОбъекты()
	
	Объекты = Неопределено;
	
	Если Метаданные.Справочники.Количество() <> 0 И Метаданные.Документы.Количество() <> 0 Тогда
		
		Объекты = Новый Структура();
		
		// Первый объект назовём "_СтруктураВыгрузки", у него будет 3 реквизита.
		// Реквизит "Номенклатура" будет ссылаться на соответствующий справочник,
		// если он есть, или на первый попавшийся справочник
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Справочник = Метаданные.Справочники.Найти("Номенклатура");
		Если Справочник = Неопределено Тогда
			Справочник = Метаданные.Справочники.Получить(0);
		КонецЕсли;
		
		// Ссылка на объект указывается как catalogs.ИмяСправочника или documents.ИмяДокумента
		// catalogs и documents - соответственно имена объектов, хранящих описание метаданных в файле bslMetadata.js
		// В модуле объекта есть функция ПолучитьСвязьСОбъектомМетаданных(Реквизит), которая принимает реквизит
		// Её достаточно просто модифицировать, чтобы она принимала, например, тип и сразу отдавала связь в нужном виде
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = СтруктураРеквизита("Цена товара");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Реквизит = СтруктураРеквизита("Остаток товара на складе");
		ПользовательскийОбъект.properties.Вставить("Остаток", Реквизит);
		
		Объекты.Вставить("_СтруктураВыгрузки", ПользовательскийОбъект);
		
		// Второй объект будет называться "_Партия", у него будет 3 реквизита,
		// два из которых "ПриходнаяНакладная" и "Номенклатура" будут ссылаться
		// на документ и справочник соотвественно
		ПользовательскийОбъект = Новый Структура("properties", Новый Структура());
		
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровУслуг");
		Если Документ = Неопределено Тогда
			Документ = Метаданные.Документы.Найти("ПоступлениеТоваров");
			Если Документ = Неопределено Тогда
				Документ = Метаданные.Документы.Получить(0);
			КонецЕсли;
		КонецЕсли;
		
		Реквизит = СтруктураРеквизита("Документ закупки", "documents." + Документ.Имя);
		ПользовательскийОбъект.properties.Вставить("ПриходнаяНакладная", Реквизит);
		
		Реквизит = СтруктураРеквизита("Элемент номенклатуры", "catalogs." + Справочник.Имя);
		ПользовательскийОбъект.properties.Вставить("Номенклатура", Реквизит);
		
		Реквизит = Новый Структура("name", "Закупочная цена");
		ПользовательскийОбъект.properties.Вставить("Цена", Реквизит);
		
		Объекты.Вставить("_Партия", ПользовательскийОбъект);
		
		// Теперь загоняем наши объекты в JSON-строку
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, Новый Структура("customObjects", Объекты));
			Объекты = Файл.Закрыть();
		Исключение
			СообщитьПользователю("Не удалось сохранить пользовательские объекты:" + Символы.ПС + ОписаниеОшибки());
			Объекты = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Объекты;
	
КонецФункции

&НаКлиенте
Процедура УправлениеБыстрымиПодсказками()
	
	Элементы.БыстрыеПодсказки.Пометка = БыстрыеПодсказки;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УправлениеВидимостьюПробеловТабуляций()

	Элементы.ОтображатьПробелыИТабуляции.Пометка = ОтображатьПробелыИТабуляции;
	View().renderWhitespace(ОтображатьПробелыИТабуляции);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСравнения()
	
	Элементы.СравнитьСОригиналом.Видимость = ЗначениеЗаполнено(ИмяСохраненногоФайла);
	
КонецПроцедуры

#КонецОбласти



