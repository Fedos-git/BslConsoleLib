&НаКлиенте
Перем _View, _РедакторТекста;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	ИспользоватьWebKit = Параметры.ИспользоватьWebKit;
	
	ВерсияОбработки = ВерсияОбработки();
	
	АдресМакета = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Объект").ПолучитьМакет("src"), Новый УникальныйИдентификатор());
	
	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) Экспорт
	
	Если ИспользоватьWebKit Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
		НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
		ОпределитьРазделительПути();
	Иначе
		ИнициализироватьРедакторТекста();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ConsoleOnReady() Экспорт 
	
	Если ИсходникиЗагружены Тогда	
		ИнициализацияРедактора();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	ИмяСобытия = Событие.event;
	Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
		ВызватьКонструкторЗапроса(Событие.params);
	ИначеЕсли ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
		ВызватьКонструкторФорматнойСтроки(Событие.params);
	ИначеЕсли ИмяСобытия = "EVENT_GET_METADATA" Тогда
		ОбработкаСобытияПолученияМетаданных(Событие.params);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
		
 	Если ДанныеСобытия.Event.eventData1C <> Неопределено Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	ВладелецФормы[Параметры.ИмяРеквизита] = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Исключение
		ВызватьИсключение("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект);
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Оповещение, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект);
	НачатьУдалениеФайлов(Оповещение, КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда		
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		Оповещение = Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект);
		НачатьКопированиеФайла(Оповещение, ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда	
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект);
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	Иначе		
		ВызватьИсключение("Не удалось создать каталог для исходников");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект);
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект);
	НачатьСозданиеКаталога(Оповещение, КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект);
		НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт
	
	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().setOption("generateModificationEvent", Истина);	
	View().hideScrollX();
	View().hideScrollY();
	
	//ПрименитьНастройкиРедактора();
	
	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
		
КонецПроцедуры

#КонецОбласти 

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Если _View <> Неопределено Тогда
		Возврат _View;
	ИначеЕсли ВладелецФормы.Элементы[Параметры.ИмяЭлемента].Документ <> Неопределено Тогда
		_View = ВладелецФормы.Элементы[Параметры.ИмяЭлемента].Документ.defaultView;
		Возврат _View;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
 
&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	Иначе
		Если Позиция = Неопределено Тогда //Вставка в позицию курсора
			СброситьВыделение();
			Позиция = ПолучитьГраницыВыделения();
		Иначе
			УстановитьГраницыВыделения(Позиция);
		КонецЕсли; 
		ЕстьВыделение = НЕ (Позиция.НачалоСтрока = Позиция.КонецСтрока И Позиция.НачалоКолонка = Позиция.КонецКолонка);
		УстановитьВыделенныйТекст(Текст, ЕстьВыделение);
	КонецЕсли; 
	
КонецПроцедуры 

//игнорирует режим Только просмотр
//не генерирует событие EVENT_CONTENT_CHANGED
&НаКлиенте
Процедура УстановитьСодержимое(Текст) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().setContent(Текст); //#OK API
	Иначе
		ВладелецФормы[Параметры.ИмяРеквизита] = Текст;
	КонецЕсли;
	
КонецПроцедуры 

//игнорирует режим Только просмотр
&НаКлиенте
Процедура ОбновитьТекст(Текст, ОчиститьИсторию = Ложь) Экспорт	//++
	//не генерит EVENT_CONTENT_CHANGED, хотя должно
	
	Если ИспользоватьWebKit Тогда
		View().updateText(Текст, ОчиститьИсторию); //#OK API 
		View().sendEvent("EVENT_CONTENT_CHANGED", ""); //#OK API, сгенерим вручную
	Иначе
		ВладелецФормы[Параметры.ИмяРеквизита] = Текст; 
		ОтправитьСобытие("РедакторТекстаПриИзменении");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьТекст() Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		Возврат View().getText(); //#OK API
	Иначе
		Возврат ВладелецФормы[Параметры.ИмяРеквизита];
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст() Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		Возврат View().eraseText(); //#OK API
	Иначе
		_РедакторТекста = "";
		ОтправитьСобытие("РедакторТекстаПриИзменении");
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьЗакладки() Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		Возврат View().getBookmarks(); //#OK API
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции  

&НаКлиенте
Функция УстановитьЗакладки(Закладки) Экспорт //++
	
	Результат = Истина;
	
	Если ИспользоватьWebKit Тогда
		_View = View(); //#OK API
		Для Каждого Элемент Из Закладки Цикл
			Результат = Результат И _View.addBookmark(Элемент); //#OK API
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;  
	
КонецФункции 

&НаКлиенте
Функция РедакторВРежимеЗапроса() Экспорт //++
	
	Если ИспользоватьWebKit Тогда 
		//можно View().queryMode
		//.getCurrentLanguageId() - bsl,bsl_query,dcs_query,xml
		Возврат View().getCurrentLanguageId() = "bsl_query"; //#OK API
	Иначе
		Возврат ВладелецФормы.РежимЗапроса();
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ОтметитьОшибку(Строка, Колонка) Экспорт //++
	Если ИспользоватьWebKit Тогда
		View().markError(Строка, Колонка); //#OK API
	Иначе
		_РедакторТекста.УстановитьГраницыВыделения(Строка, Колонка, Строка, Колонка + 1);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьВыделенныйТекст() Экспорт //++
	
	Если ИспользоватьWebKit Тогда 
		//Еще есть getSelectedText(), она не документирована
		Возврат View().selectedText(); //#OK API	  	
	Иначе
		Возврат _РедакторТекста.ВыделенныйТекст;
	КонецЕсли; 
	
КонецФункции 

&НаКлиенте
Процедура УстановитьВыделенныйТекст(Текст, ОставитьВыделение = Истина) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().selectedText(Текст, ОставитьВыделение);	//#OK API
	Иначе  
		ГраницыВыделения = ПолучитьГраницыВыделения();
		_РедакторТекста.ВыделенныйТекст = Текст;
		ОтправитьСобытие("РедакторТекстаПриИзменении");
		Если ОставитьВыделение Тогда 
			ЧислоСтрок = СтрЧислоСтрок(Текст);
			ГраницыВыделения.КонецСтрока = ГраницыВыделения.НачалоСтрока + ЧислоСтрок - 1;
			Если ЧислоСтрок = 1 Тогда
				ГраницыВыделения.КонецКолонка = ГраницыВыделения.НачалоКолонка + СтрДлина(Текст);
			Иначе	
				ПоследняяСтрока = СтрПолучитьСтроку(Текст, ЧислоСтрок);
				ГраницыВыделения.КонецКолонка = СтрДлина(ПоследняяСтрока) + 1;
				УстановитьГраницыВыделения(ГраницыВыделения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьГраницыВыделения() Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		Возврат View().getSelection();	//#OK API
	Иначе
		Результат = Новый Структура("НачалоСтрока, НачалоКолонка, КонецСтрока, КонецКолонка");
		_РедакторТекста.ПолучитьГраницыВыделения(Результат.НачалоСтрока, Результат.НачалоКолонка, Результат.КонецСтрока, Результат.КонецКолонка);
		Возврат Результат;	
	КонецЕсли; 
	
КонецФункции  

&НаКлиенте
Процедура УстановитьГраницыВыделения(ГВ) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().setSelection(ГВ.НачалоСтрока, ГВ.НачалоКолонка, ГВ.КонецСтрока, ГВ.КонецКолонка);	//#OK API
	Иначе
		_РедакторТекста.УстановитьГраницыВыделения(ГВ.НачалоСтрока, ГВ.НачалоКолонка, ГВ.КонецСтрока, ГВ.КонецКолонка);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура СброситьВыделение() //++
	ВыделенныйТекст = _РедакторТекста.ВыделенныйТекст;
	Если Не ПустаяСтрока(ВыделенныйТекст) Тогда
		_РедакторТекста.ВыделенныйТекст = ВыделенныйТекст;
	КонецЕсли;		
КонецПроцедуры 

&НаКлиенте
Функция РедакторТолькоПросмотр(флТолькоПросмотр = Неопределено) Экспорт //++
	Результат = Неопределено;	
	Если ИспользоватьWebKit Тогда
		Если флТолькоПросмотр = Неопределено Тогда
			Результат = View().getReadOnly();
		Иначе	
			View().setReadOnly(флТолькоПросмотр); //#OK  API
		КонецЕсли;
	Иначе
		Если флТолькоПросмотр = Неопределено Тогда
			Результат = НЕ _РедакторТекста.Доступность;
		Иначе	
			_РедакторТекста.Доступность = Не флТолькоПросмотр;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьШаблоныВРедактор(СтрокаШаблонов) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().parseSnippets(СтрокаШаблонов);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьШрифтРедактора(НастройкиШрифта) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().setFontSize(НастройкиШрифта.РазмерШрифта);	
		View().setFontFamily(НастройкиШрифта.ИмяШрифта);	
		View().setFontWeight(НастройкиШрифта.ТолщинаШрифта);	
		View().setLineHeight(НастройкиШрифта.ВысотаСтроки);			
	Иначе
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаРедактора(Команда) Экспорт //++
	
	Если ИспользоватьWebKit Тогда
		View().editor.trigger("", Команда);
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимЗапроса(РежимЗапроса) Экспорт //++
	
	Если ИспользоватьWebKit Тогда 
		Если РежимЗапроса Тогда
			РежимРедактора = "bsl_query";
		Иначе
			РежимРедактора = "bsl";
		КонецЕсли;
		
		//.getCurrentLanguageId() - bsl,bsl_query,dcs_query,xml
		Если РежимРедактора <> View().getCurrentLanguageId() Тогда  //#OK есть проверка
			View().setLanguageMode(РежимРедактора); //#OK есть проверка
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 


#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	ОтправитьСобытие("ЗакрытиеКонструктораЗапросов");
	Если Текст <> Неопределено Тогда
		
		Если Не РедакторВРежимеЗапроса() Тогда 
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		Если ТипЗнч(ДопПараметры) = Тип("ВнешнийОбъект") ИЛИ ДопПараметры = Неопределено Тогда
			УстановитьТекст(Текст, ДопПараметры, Истина);
		Иначе
			Если ДопПараметры.Свойство("ВесьЗапрос") Тогда
				ОбновитьТекст(Текст, Ложь);  
			Иначе
				УстановитьТекст(Текст, ДопПараметры, Истина);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ОтправитьСобытие("АктивизироватьРедактор");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
		
	Конструктор = Новый КонструкторЗапроса();
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			
			ПараметрыОшибки = Новый Структура("СдвигСтрока, СдвигКолонка", 0, 0);
			Если ТипЗнч(ДопПараметры) = Тип("ВнешнийОбъект") Тогда
				ПараметрыОшибки.СдвигСтрока = ДопПараметры.startLineNumber - 1;	
			ИначеЕсли ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("НачалоСтрока") Тогда
				ПараметрыОшибки.СдвигСтрока = ДопПараметры.НачалоСтрока - 1;	
			КонецЕсли;
						
			Инфо = РасширеннаяИнформацияОбОшибке(ИнформацияОбОшибке(), "", ПараметрыОшибки);
			ВладелецФормы.ПоказатьОшибку(Инфо);
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение); 
	ОтправитьСобытие("ОткрытиеКонструктораЗапросов");
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект);
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли РедакторВРежимеЗапроса() Тогда  //ИначеЕсли //Параметры Структура
		ВыделенныйТекст = ПолучитьВыделенныйТекст();
		Если ПустаяСтрока(ВыделенныйТекст) Тогда
			ДопПараметрыЗапроса = Новый Структура("ВесьЗапрос", Истина);
			ТекстЗапроса = ПараметрыЗапроса;
		Иначе
			ДопПараметрыЗапроса = ПолучитьГраницыВыделения();
			ТекстЗапроса = ВыделенныйТекст;
		КонецЕсли;
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ДопПараметрыЗапроса);
	ИначеЕсли ТипЗнч(ПараметрыЗапроса) = Тип("ВнешнийОбъект") ИЛИ ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
		
	КонецЕсли;
	
КонецПроцедуры

//Для поля текстового документа
&НаКлиенте
Процедура КонструкторЗапросов(Команда)
	
	Если РедакторВРежимеЗапроса() Тогда
		ВызватьКонструкторЗапроса(ПолучитьТекст());		
	Иначе
		ПараметрыЗапроса = ТекстЗапросаПодКурсором();
		ВызватьКонструкторЗапроса(ПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция ТекстЗапросаПодКурсором() 
	
	ПозицияКурсора = ПолучитьГраницыВыделения(); //НачалоСтрока, НачалоКолонка, КонецСтрока, КонецКолонка
	//ПозицияКурсора.КонецСтрока = ПозицияКурсора.НачалоСтрока;
	//ПозицияКурсора.КонецКолонка = ПозицияКурсора.НачалоКолонка;
	ТекущаяСтрока = ПозицияКурсора.НачалоСтрока;	
	ТекущаяКолонка = ПозицияКурсора.НачалоКолонка;
	
	ТекстМодуля = ПолучитьТекст();
	КоличествоСтрок = СтрЧислоСтрок(ТекстМодуля);
	НайденаКавычка = Ложь;
	
	Для НомерСтроки = ТекущаяСтрока По КоличествоСтрок Цикл		
		СодержимоеСтроки = СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
		ДлинаСтроки = СтрДлина(СодержимоеСтроки);
		
		Если ПустаяСтрока(СодержимоеСтроки) Тогда 
			//Пропускаем
		ИначеЕсли НомерСтроки > ТекущаяСтрока И НЕ СтрНачинаетсяС(СокрЛ(СодержимоеСтроки), "|") Тогда
			//Это уже не строка 
			Прервать;
		ИначеЕсли СтрНайти(СодержимоеСтроки, """") > 0 Тогда
			ПозицияНачалаПоиска = ?(НомерСтроки = ТекущаяСтрока, ТекущаяКолонка, Неопределено);
			ПозицияКавычки = НайтиКавычку(СодержимоеСтроки,	ПозицияНачалаПоиска, НаправлениеПоиска.СНачала);
			Если ПозицияКавычки <> Неопределено Тогда
				НайденаКавычка = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденаКавычка Тогда
		НайденаКавычка = Ложь;
		ПозицияКурсора.КонецСтрока = НомерСтроки;
		ПозицияКурсора.КонецКолонка = ПозицияКавычки + 1;
		
		ЗаканчиваемПоиск = Ложь;
		Для Х = 0 По ТекущаяСтрока - 1 Цикл 			
			НомерСтроки = ТекущаяСтрока - Х;	
			СодержимоеСтроки = СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
			ДлинаСтроки = СтрДлина(СодержимоеСтроки); 
			
			Если ПустаяСтрока(СодержимоеСтроки) Тогда 
				Продолжить;
			ИначеЕсли СтрНайти(СодержимоеСтроки, """") > 0 Тогда
				ПозицияНачалаПоиска = ?(НомерСтроки = ТекущаяСтрока, ТекущаяКолонка, Неопределено);
				ПозицияКавычки = НайтиКавычку(СодержимоеСтроки,	ПозицияНачалаПоиска, НаправлениеПоиска.СКонца);
				Если ПозицияКавычки <> Неопределено Тогда
					НайденаКавычка = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтрНачинаетсяС(СокрЛ(СодержимоеСтроки), "|") Тогда
				//Это уже не строка
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если НайденаКавычка Тогда
			ПозицияКурсора.НачалоСтрока = НомерСтроки;
			ПозицияКурсора.НачалоКолонка = ПозицияКавычки; 
			
			УстановитьГраницыВыделения(ПозицияКурсора);
			Результат = Новый Структура("text, range", ПолучитьВыделенныйТекст(), ПозицияКурсора);
			СброситьВыделение();
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции  

&НаКлиенте
Функция НайтиКавычку(Содержимое, ПозицияПоиска = Неопределено, Направление)
	
	ДлинаСтроки = СтрДлина(Содержимое);
	
	НачалоКавычек = 0; КоличествоКавычек = 0;
	Для Х = 1 По ДлинаСтроки Цикл 
		Если Направление = НаправлениеПоиска.СНачала Тогда
			Позиция = Х;
		Иначе
			Позиция = ДлинаСтроки - Х + 1;
		КонецЕсли; 
		ТекущийСимволКавычка = Сред(Содержимое, Позиция, 1) = """";
		Если ТекущийСимволКавычка Тогда
			Если НачалоКавычек = 0 Тогда
				НачалоКавычек = Позиция;	
			КонецЕсли;
			КоличествоКавычек = КоличествоКавычек + 1;
		КонецЕсли;	
		
		//Здесь не распознаются странные строки вида "ВЫБРАТЬ 1," "2"
		//Можно доделать, но так никто не пишет ибо badpractice
		Если (НЕ ТекущийСимволКавычка Или Х = ДлинаСтроки)
			И КоличествоКавычек % 2 = 1 Тогда
			Если Направление = НаправлениеПоиска.СНачала Тогда
				ПозицияКавычки = Позиция - ?(ТекущийСимволКавычка, 0, 1);
				Если ПозицияПоиска = Неопределено ИЛИ ПозицияКавычки >= ПозицияПоиска Тогда
					Возврат ПозицияКавычки;	
				КонецЕсли;
			Иначе
				ПозицияКавычки = Позиция + ?(ТекущийСимволКавычка, 0, 1);
				Если ПозицияПоиска = Неопределено ИЛИ ПозицияКавычки < ПозицияПоиска Тогда
					Возврат ПозицияКавычки;	
				КонецЕсли;
			КонецЕсли;	
			НачалоКавычек = 0; КоличествоКавычек = 0;
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции 

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда	
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		//ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Оповещение = Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры);
	Конструктор.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)
	
	Если ПараметрыСтроки = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект);
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие"     , ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();	
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл		
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных"      , "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources"         , "externalDataSources");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "Catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "Catalogs");
	СоответствиеИмен.Вставить("документы"                   , "Documents");
	СоответствиеИмен.Вставить("documents"                   , "Documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters"        , "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления"          , "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters"       , "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета"             , "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters"        , "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки"                   , "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors"              , "DataProcessors");
	СоответствиеИмен.Вставить("отчеты"                      , "Reports");
	СоответствиеИмен.Вставить("reports"                     , "Reports");
	СоответствиеИмен.Вставить("перечисления"                , "Enums");
	СоответствиеИмен.Вставить("enums"                       , "Enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "Tasks");
	СоответствиеИмен.Вставить("tasks"                       , "Tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "Constants");
	СоответствиеИмен.Вставить("constants"                   , "Constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);		
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;	
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
		
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
		
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
			
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя,
	ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			СтруктураТабличнойЧасти = Новый Структура();
			СтруктураТабличнойЧасти.Вставить("properties", ОписаниеТабличнойЧасти);
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, СтруктураТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных)
	
	СтруктураИсточника = Новый Структура();
	
	ОписаниеТаблиц = Новый Структура();
	
	Для Каждого Таблица Из ОбъектМетаданных.Таблицы Цикл
		
		ОбъектныеДанные = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные;
		ТипТаблицы = ?(Таблица.ТипДанныхТаблицы = ОбъектныеДанные, "ObjectData", "NonobjectData");
		
		СтруктураТаблицы = Новый Структура();
		СтруктураТаблицы.Вставить("tableDataType", ТипТаблицы);
		
		ПоляТаблицы = Новый Структура();
		Для Каждого Поле Из Таблица.Поля Цикл
			ПоляТаблицы.Вставить(Поле.Имя, Новый Структура("name", Поле.Синоним));
		КонецЦикла;
		
		СтруктураТаблицы.Вставить("properties", ПоляТаблицы);
		
		ОписаниеТаблиц.Вставить(Таблица.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
	СтруктураИсточника.Вставить("tables", Новый Структура("items", ОписаниеТаблиц));
	
	Возврат СтруктураИсточника;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных)
	
	СтруктураИсточника = ПолучитьСтруктуруВнешнегоИсточникаДанных(ОбъектМетаданных);
	Для Каждого Обход Из СтруктураИсточника Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя)
	
	ОписаниеРеквизитов = Новый Структура();
	ОписаниеРесурсов = Новый Структура();
	ОписаниеПредопределенных = Новый Структура();
	ОписаниеТабличныхЧастей = Новый Структура();
	ДополнительныеСвойства = Новый Структура();
	
	Связи = Новый Соответствие();
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
	Иначе
		ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
		ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
		ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя,
		ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
		ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;
	
	Если 0 < ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
	Если 0 < ОписаниеПредопределенных.Количество() Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
	КонецЕсли;
	
	Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СтруктураОбъекта = Новый Структура();
		
		Если 0 < СтрНайти(ИмяМетаданных(ПолноеИмя), "ВнешнийИсточникДанных") Тогда
			ЗаполнитьСтруктуруОбъектаДляВнешнегоИсточникаДанных(СтруктураОбъекта, ОбъектМетаданных);
		Иначе
			ЗаполнитьСтруктуруОбъектаМетаданных(СтруктураОбъекта, ОбъектМетаданных, ПолноеИмя);
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)
	
	ПараметрыЗапроса = НРег(Событие.metadata);
	ВызыватьПодсказку = (Событие.trigger = "suggestion");
	ДанныеОбновлены = Ложь;
	
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ДанныеОбновлены = ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ДанныеОбновлены = ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;
			
		Иначе
			
			ДанныеОбновлены = ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОбновлены = ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
		
	КонецЕсли;         
	
	Если Событие.trigger = "suggestion" И ДанныеОбновлены Тогда
		View().triggerSuggestions();
	КонецЕсли;
	
	Если Событие.trigger = "snippet"  Тогда
		View().updateSnippetByGUID(Событие.snippet_guid);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
		ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей)
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода()
	
	КаталогИсходногоКода = Объект.КаталогИсходногоКодаКонфигурации;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;
	
	Возврат КаталогИсходногоКода;
	
КонецФункции

&НаКлиенте
Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Загрузка общих модулей...");
		Файлы = НайтиФайлы(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;
		
		Состояние("Общие модули загружены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		ОбщийМодуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Если ФайлНаДиске.Существует() Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГлобальныеМодули()
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ГлобальныйМодули <> Неопределено И 0 < ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		
		Если КаталогНаДиске.Существует() Тогда
			
			Индекс = 0;
			
			Пока Индекс < ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);
		
		Если 0 < ЗагруженоФункций Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути)
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля"        , ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных"    , ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных" , ЧастиЗапроса[3]);
		
		ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути);
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
		Результат = View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияОбработки()
	Возврат "20220504";	
КонецФункции 

#КонецОбласти

#Область Закрытие 

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль() Экспорт
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстовыйРедактор

&НаКлиенте
Процедура ИнициализироватьРедакторТекста()
	
	Если Не ПустаяСтрока(Параметры.АльтернативноеИмяЭлемента) Тогда
		_РедакторТекста = ВладелецФормы.Элементы[Параметры.АльтернативноеИмяЭлемента];
	Иначе
		_РедакторТекста = ВладелецФормы.Элементы[Параметры.ИмяЭлемента];
	КонецЕсли;
	
КонецПроцедуры

	
#КонецОбласти

&НаКлиенте
Процедура ОтправитьСобытие(ИмяСобытия)

	Оповестить(ИмяСобытия,, ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработкаОшибок

&НаСервереБезКонтекста
Функция СериализоватьИнформациюОбОшибке(ИнформацияОбОшибке)
	#Если Сервер И НЕ Сервер Тогда
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	#КонецЕсли
	
	Результат = Новый Структура("ИмяМодуля, ИсходнаяСтрока, НомерСтроки, Описание, Причина");
	ЗаполнитьЗначенияСвойств(Результат, ИнформацияОбОшибке,, "Причина");
	Результат.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Результат.Причина = СериализоватьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции 
 
&НаКлиентеНаСервереБезКонтекста
Функция РасширеннаяИнформацияОбОшибке(ИнформацияОбОшибке, Модуль = "", Сдвиг = Неопределено)
	
	Инфо = ИнформацияОбОшибке;
	#Если Сервер Тогда
		Если НЕ ВерсияПриложенияСтарше("8.3.15") Тогда
			Инфо = СериализоватьИнформациюОбОшибке(ИнформацияОбОшибке);
		КонецЕсли; 		
	#КонецЕсли 
	
	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбОшибке", Инфо);
	Результат.Вставить("Модуль", Модуль);
	Если Сдвиг = Неопределено Тогда
		Сдвиг = Новый Структура("СдвигСтрока, СдвигКолонка", 0, 0);
	КонецЕсли;
	Результат.Вставить("Сдвиг", Сдвиг); 
	
	Возврат Результат;
	#Если Сервер И НЕ Сервер Тогда
		
	#КонецЕсли
	
КонецФункции 

#КонецОбласти  

#Область Сервис

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияПриложенияСтарше(ТребуемаяВерсия)
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ЧастиТребуемойВерсии = СтрРазделить(ТребуемаяВерсия, ".", Ложь);
	ЧастиВерсииПриложения = СтрРазделить(ВерсияПриложения, ".", Ложь);
	
	Результат = Ложь;
	Для Х = 0 По 3 Цикл
		Если ЧастиВерсииПриложения[Х] <> ЧастиТребуемойВерсии[Х] Тогда
			Результат = Число(ЧастиВерсииПриложения[Х]) > Число(ЧастиТребуемойВерсии[Х]);
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти
